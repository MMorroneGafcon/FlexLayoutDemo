{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Actions = void 0;\n\nvar Action_1 = require(\"./Action\");\n/**\n * The Action creator class for FlexLayout model actions\n */\n\n\nvar Actions =\n/** @class */\nfunction () {\n  function Actions() {}\n  /**\n   * Adds a tab node to the given tabset node\n   * @param json the json for the new tab node e.g {type:\"tab\", component:\"table\"}\n   * @param toNodeId the new tab node will be added to the tabset with this node id\n   * @param location the location where the new tab will be added, one of the DockLocation enum values.\n   * @param index for docking to the center this value is the index of the tab, use -1 to add to the end.\n   * @param select (optional) whether to select the new tab, overriding autoSelectTab\n   * @returns {Action} the action\n   */\n\n\n  Actions.addNode = function (json, toNodeId, location, index, select) {\n    return new Action_1.Action(Actions.ADD_NODE, {\n      json: json,\n      toNode: toNodeId,\n      location: location.getName(),\n      index: index,\n      select: select\n    });\n  };\n  /**\n   * Moves a node (tab or tabset) from one location to another\n   * @param fromNodeId the id of the node to move\n   * @param toNodeId the id of the node to receive the moved node\n   * @param location the location where the moved node will be added, one of the DockLocation enum values.\n   * @param index for docking to the center this value is the index of the tab, use -1 to add to the end.\n   * @param select (optional) whether to select the moved tab(s) in new tabset, overriding autoSelectTab\n   * @returns {Action} the action\n   */\n\n\n  Actions.moveNode = function (fromNodeId, toNodeId, location, index, select) {\n    return new Action_1.Action(Actions.MOVE_NODE, {\n      fromNode: fromNodeId,\n      toNode: toNodeId,\n      location: location.getName(),\n      index: index,\n      select: select\n    });\n  };\n  /**\n   * Deletes a tab node from the layout\n   * @param tabsetNodeId the id of the tab node to delete\n   * @returns {Action} the action\n   */\n\n\n  Actions.deleteTab = function (tabNodeId) {\n    return new Action_1.Action(Actions.DELETE_TAB, {\n      node: tabNodeId\n    });\n  };\n  /**\n   * Deletes a tabset node and all it's child tab nodes from the layout\n   * @param tabsetNodeId the id of the tabset node to delete\n   * @returns {Action} the action\n   */\n\n\n  Actions.deleteTabset = function (tabsetNodeId) {\n    return new Action_1.Action(Actions.DELETE_TABSET, {\n      node: tabsetNodeId\n    });\n  };\n  /**\n   * Change the given nodes tab text\n   * @param tabNodeId the id of the node to rename\n   * @param text the test of the tab\n   * @returns {Action} the action\n   */\n\n\n  Actions.renameTab = function (tabNodeId, text) {\n    return new Action_1.Action(Actions.RENAME_TAB, {\n      node: tabNodeId,\n      text: text\n    });\n  };\n  /**\n   * Selects the given tab in its parent tabset\n   * @param tabNodeId the id of the node to set selected\n   * @returns {Action} the action\n   */\n\n\n  Actions.selectTab = function (tabNodeId) {\n    return new Action_1.Action(Actions.SELECT_TAB, {\n      tabNode: tabNodeId\n    });\n  };\n  /**\n   * Set the given tabset node as the active tabset\n   * @param tabsetNodeId the id of the tabset node to set as active\n   * @returns {Action} the action\n   */\n\n\n  Actions.setActiveTabset = function (tabsetNodeId) {\n    return new Action_1.Action(Actions.SET_ACTIVE_TABSET, {\n      tabsetNode: tabsetNodeId\n    });\n  };\n  /**\n   * Adjust the splitter between two tabsets\n   * @example\n   *  Actions.adjustSplit({node1: \"1\", weight1:30, pixelWidth1:300, node2: \"2\", weight2:70, pixelWidth2:700});\n   *\n   * @param splitSpec an object the defines the new split between two tabsets, see example below.\n   * @returns {Action} the action\n   */\n\n\n  Actions.adjustSplit = function (splitSpec) {\n    var node1 = splitSpec.node1Id;\n    var node2 = splitSpec.node2Id;\n    return new Action_1.Action(Actions.ADJUST_SPLIT, {\n      node1: node1,\n      weight1: splitSpec.weight1,\n      pixelWidth1: splitSpec.pixelWidth1,\n      node2: node2,\n      weight2: splitSpec.weight2,\n      pixelWidth2: splitSpec.pixelWidth2\n    });\n  };\n\n  Actions.adjustBorderSplit = function (nodeId, pos) {\n    return new Action_1.Action(Actions.ADJUST_BORDER_SPLIT, {\n      node: nodeId,\n      pos: pos\n    });\n  };\n  /**\n   * Maximizes the given tabset\n   * @param tabsetNodeId the id of the tabset to maximize\n   * @returns {Action} the action\n   */\n\n\n  Actions.maximizeToggle = function (tabsetNodeId) {\n    return new Action_1.Action(Actions.MAXIMIZE_TOGGLE, {\n      node: tabsetNodeId\n    });\n  };\n  /**\n   * Updates the global model jsone attributes\n   * @param attributes the json for the model attributes to update (merge into the existing attributes)\n   * @returns {Action} the action\n   */\n\n\n  Actions.updateModelAttributes = function (attributes) {\n    return new Action_1.Action(Actions.UPDATE_MODEL_ATTRIBUTES, {\n      json: attributes\n    });\n  };\n  /**\n   * Updates the given nodes json attributes\n   * @param nodeId the id of the node to update\n   * @param attributes the json attributes to update (merge with the existing attributes)\n   * @returns {Action} the action\n   */\n\n\n  Actions.updateNodeAttributes = function (nodeId, attributes) {\n    return new Action_1.Action(Actions.UPDATE_NODE_ATTRIBUTES, {\n      node: nodeId,\n      json: attributes\n    });\n  };\n\n  Actions.floatTab = function (nodeId) {\n    return new Action_1.Action(Actions.FLOAT_TAB, {\n      node: nodeId\n    });\n  };\n\n  Actions.unFloatTab = function (nodeId) {\n    return new Action_1.Action(Actions.UNFLOAT_TAB, {\n      node: nodeId\n    });\n  };\n\n  Actions.ADD_NODE = \"FlexLayout_AddNode\";\n  Actions.MOVE_NODE = \"FlexLayout_MoveNode\";\n  Actions.DELETE_TAB = \"FlexLayout_DeleteTab\";\n  Actions.DELETE_TABSET = \"FlexLayout_DeleteTabset\";\n  Actions.RENAME_TAB = \"FlexLayout_RenameTab\";\n  Actions.SELECT_TAB = \"FlexLayout_SelectTab\";\n  Actions.SET_ACTIVE_TABSET = \"FlexLayout_SetActiveTabset\";\n  Actions.ADJUST_SPLIT = \"FlexLayout_AdjustSplit\";\n  Actions.ADJUST_BORDER_SPLIT = \"FlexLayout_AdjustBorderSplit\";\n  Actions.MAXIMIZE_TOGGLE = \"FlexLayout_MaximizeToggle\";\n  Actions.UPDATE_MODEL_ATTRIBUTES = \"FlexLayout_UpdateModelAttributes\";\n  Actions.UPDATE_NODE_ATTRIBUTES = \"FlexLayout_UpdateNodeAttributes\";\n  Actions.FLOAT_TAB = \"FlexLayout_FloatTab\";\n  Actions.UNFLOAT_TAB = \"FlexLayout_UnFloatTab\";\n  return Actions;\n}();\n\nexports.Actions = Actions;","map":{"version":3,"mappings":"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","names":["Actions","json","toNodeId","location","index","select","Action_1","ADD_NODE","toNode","getName","fromNodeId","MOVE_NODE","fromNode","tabNodeId","DELETE_TAB","node","tabsetNodeId","DELETE_TABSET","text","RENAME_TAB","SELECT_TAB","tabNode","SET_ACTIVE_TABSET","tabsetNode","splitSpec","node1","node1Id","node2","node2Id","ADJUST_SPLIT","weight1","pixelWidth1","weight2","pixelWidth2","nodeId","pos","ADJUST_BORDER_SPLIT","MAXIMIZE_TOGGLE","attributes","UPDATE_MODEL_ATTRIBUTES","UPDATE_NODE_ATTRIBUTES","FLOAT_TAB","UNFLOAT_TAB","exports"],"sources":["C:\\Users\\mmorrone\\UnityProjects\\my-app\\node_modules\\flexlayout-react\\src\\model\\Actions.ts"],"sourcesContent":["import { DockLocation } from \"../DockLocation\";\nimport { Action } from \"./Action\";\n\n/**\n * The Action creator class for FlexLayout model actions\n */\nexport class Actions {\n    static ADD_NODE = \"FlexLayout_AddNode\";\n    static MOVE_NODE = \"FlexLayout_MoveNode\";\n    static DELETE_TAB = \"FlexLayout_DeleteTab\";\n    static DELETE_TABSET = \"FlexLayout_DeleteTabset\";\n    static RENAME_TAB = \"FlexLayout_RenameTab\";\n    static SELECT_TAB = \"FlexLayout_SelectTab\";\n    static SET_ACTIVE_TABSET = \"FlexLayout_SetActiveTabset\";\n    static ADJUST_SPLIT = \"FlexLayout_AdjustSplit\";\n    static ADJUST_BORDER_SPLIT = \"FlexLayout_AdjustBorderSplit\";\n    static MAXIMIZE_TOGGLE = \"FlexLayout_MaximizeToggle\";\n    static UPDATE_MODEL_ATTRIBUTES = \"FlexLayout_UpdateModelAttributes\";\n    static UPDATE_NODE_ATTRIBUTES = \"FlexLayout_UpdateNodeAttributes\";\n    static FLOAT_TAB = \"FlexLayout_FloatTab\";\n    static UNFLOAT_TAB = \"FlexLayout_UnFloatTab\";\n\n    /**\n     * Adds a tab node to the given tabset node\n     * @param json the json for the new tab node e.g {type:\"tab\", component:\"table\"}\n     * @param toNodeId the new tab node will be added to the tabset with this node id\n     * @param location the location where the new tab will be added, one of the DockLocation enum values.\n     * @param index for docking to the center this value is the index of the tab, use -1 to add to the end.\n     * @param select (optional) whether to select the new tab, overriding autoSelectTab\n     * @returns {Action} the action\n     */\n    static addNode(json: any, toNodeId: string, location: DockLocation, index: number, select?: boolean): Action {\n        return new Action(Actions.ADD_NODE, {\n            json,\n            toNode: toNodeId,\n            location: location.getName(),\n            index,\n            select,\n        });\n    }\n\n    /**\n     * Moves a node (tab or tabset) from one location to another\n     * @param fromNodeId the id of the node to move\n     * @param toNodeId the id of the node to receive the moved node\n     * @param location the location where the moved node will be added, one of the DockLocation enum values.\n     * @param index for docking to the center this value is the index of the tab, use -1 to add to the end.\n     * @param select (optional) whether to select the moved tab(s) in new tabset, overriding autoSelectTab\n     * @returns {Action} the action\n     */\n    static moveNode(fromNodeId: string, toNodeId: string, location: DockLocation, index: number, select?: boolean): Action {\n        return new Action(Actions.MOVE_NODE, {\n            fromNode: fromNodeId,\n            toNode: toNodeId,\n            location: location.getName(),\n            index,\n            select,\n        });\n    }\n\n    /**\n     * Deletes a tab node from the layout\n     * @param tabsetNodeId the id of the tab node to delete\n     * @returns {Action} the action\n     */\n    static deleteTab(tabNodeId: string): Action {\n        return new Action(Actions.DELETE_TAB, { node: tabNodeId });\n    }\n\n    /**\n     * Deletes a tabset node and all it's child tab nodes from the layout\n     * @param tabsetNodeId the id of the tabset node to delete\n     * @returns {Action} the action\n     */\n    static deleteTabset(tabsetNodeId: string): Action {\n        return new Action(Actions.DELETE_TABSET, { node: tabsetNodeId });\n    }\n\n    /**\n     * Change the given nodes tab text\n     * @param tabNodeId the id of the node to rename\n     * @param text the test of the tab\n     * @returns {Action} the action\n     */\n    static renameTab(tabNodeId: string, text: string): Action {\n        return new Action(Actions.RENAME_TAB, { node: tabNodeId, text });\n    }\n\n    /**\n     * Selects the given tab in its parent tabset\n     * @param tabNodeId the id of the node to set selected\n     * @returns {Action} the action\n     */\n    static selectTab(tabNodeId: string): Action {\n        return new Action(Actions.SELECT_TAB, { tabNode: tabNodeId });\n    }\n\n    /**\n     * Set the given tabset node as the active tabset\n     * @param tabsetNodeId the id of the tabset node to set as active\n     * @returns {Action} the action\n     */\n    static setActiveTabset(tabsetNodeId: string): Action {\n        return new Action(Actions.SET_ACTIVE_TABSET, { tabsetNode: tabsetNodeId });\n    }\n\n    /**\n     * Adjust the splitter between two tabsets\n     * @example\n     *  Actions.adjustSplit({node1: \"1\", weight1:30, pixelWidth1:300, node2: \"2\", weight2:70, pixelWidth2:700});\n     *\n     * @param splitSpec an object the defines the new split between two tabsets, see example below.\n     * @returns {Action} the action\n     */\n    static adjustSplit(splitSpec: { node1Id: string; weight1: number; pixelWidth1: number; node2Id: string; weight2: number; pixelWidth2: number }): Action {\n        const node1 = splitSpec.node1Id;\n        const node2 = splitSpec.node2Id;\n\n        return new Action(Actions.ADJUST_SPLIT, {\n            node1,\n            weight1: splitSpec.weight1,\n            pixelWidth1: splitSpec.pixelWidth1,\n            node2,\n            weight2: splitSpec.weight2,\n            pixelWidth2: splitSpec.pixelWidth2,\n        });\n    }\n\n    static adjustBorderSplit(nodeId: string, pos: number): Action {\n        return new Action(Actions.ADJUST_BORDER_SPLIT, { node: nodeId, pos });\n    }\n\n    /**\n     * Maximizes the given tabset\n     * @param tabsetNodeId the id of the tabset to maximize\n     * @returns {Action} the action\n     */\n    static maximizeToggle(tabsetNodeId: string): Action {\n        return new Action(Actions.MAXIMIZE_TOGGLE, { node: tabsetNodeId });\n    }\n\n    /**\n     * Updates the global model jsone attributes\n     * @param attributes the json for the model attributes to update (merge into the existing attributes)\n     * @returns {Action} the action\n     */\n    static updateModelAttributes(attributes: any): Action {\n        return new Action(Actions.UPDATE_MODEL_ATTRIBUTES, { json: attributes });\n    }\n\n    /**\n     * Updates the given nodes json attributes\n     * @param nodeId the id of the node to update\n     * @param attributes the json attributes to update (merge with the existing attributes)\n     * @returns {Action} the action\n     */\n    static updateNodeAttributes(nodeId: string, attributes: any): Action {\n        return new Action(Actions.UPDATE_NODE_ATTRIBUTES, { node: nodeId, json: attributes });\n    }\n\n    static floatTab(nodeId: string): Action {\n        return new Action(Actions.FLOAT_TAB, { node: nodeId });\n    }\n\n    static unFloatTab(nodeId: string): Action {\n        return new Action(Actions.UNFLOAT_TAB, { node: nodeId });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TabButton = void 0;\n\nvar React = require(\"react\");\n\nvar I18nLabel_1 = require(\"../I18nLabel\");\n\nvar Actions_1 = require(\"../model/Actions\");\n\nvar Rect_1 = require(\"../Rect\");\n\nvar ICloseType_1 = require(\"../model/ICloseType\");\n\nvar Types_1 = require(\"../Types\");\n\nvar Utils_1 = require(\"./Utils\");\n/** @internal */\n\n\nvar TabButton = function (props) {\n  var layout = props.layout,\n      node = props.node,\n      selected = props.selected,\n      iconFactory = props.iconFactory,\n      titleFactory = props.titleFactory,\n      icons = props.icons,\n      path = props.path;\n  var selfRef = React.useRef(null);\n  var contentRef = React.useRef(null);\n\n  var onMouseDown = function (event) {\n    if (!(0, Utils_1.isAuxMouseEvent)(event) && !layout.getEditingTab()) {\n      layout.dragStart(event, undefined, node, node.isEnableDrag(), onClick, onDoubleClick);\n    }\n  };\n\n  var onAuxMouseClick = function (event) {\n    if ((0, Utils_1.isAuxMouseEvent)(event)) {\n      layout.auxMouseClick(node, event);\n    }\n  };\n\n  var onContextMenu = function (event) {\n    layout.showContextMenu(node, event);\n  };\n\n  var onClick = function () {\n    layout.doAction(Actions_1.Actions.selectTab(node.getId()));\n  };\n\n  var onDoubleClick = function (event) {\n    if (node.isEnableRename()) {\n      onRename();\n    }\n  };\n\n  var onRename = function () {\n    layout.setEditingTab(node);\n    layout.getCurrentDocument().body.addEventListener(\"mousedown\", onEndEdit);\n    layout.getCurrentDocument().body.addEventListener(\"touchstart\", onEndEdit);\n  };\n\n  var onEndEdit = function (event) {\n    if (event.target !== contentRef.current) {\n      layout.getCurrentDocument().body.removeEventListener(\"mousedown\", onEndEdit);\n      layout.getCurrentDocument().body.removeEventListener(\"touchstart\", onEndEdit);\n      layout.setEditingTab(undefined);\n    }\n  };\n\n  var isClosable = function () {\n    var closeType = node.getCloseType();\n\n    if (selected || closeType === ICloseType_1.ICloseType.Always) {\n      return true;\n    }\n\n    if (closeType === ICloseType_1.ICloseType.Visible) {\n      // not selected but x should be visible due to hover\n      if (window.matchMedia && window.matchMedia(\"(hover: hover) and (pointer: fine)\").matches) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var onClose = function (event) {\n    if (isClosable()) {\n      layout.doAction(Actions_1.Actions.deleteTab(node.getId()));\n    } else {\n      onClick();\n    }\n  };\n\n  var onCloseMouseDown = function (event) {\n    event.stopPropagation();\n  };\n\n  React.useLayoutEffect(function () {\n    updateRect();\n\n    if (layout.getEditingTab() === node) {\n      contentRef.current.select();\n    }\n  });\n\n  var updateRect = function () {\n    // record position of tab in node\n    var layoutRect = layout.getDomRect();\n    var r = selfRef.current.getBoundingClientRect();\n\n    node._setTabRect(new Rect_1.Rect(r.left - layoutRect.left, r.top - layoutRect.top, r.width, r.height));\n  };\n\n  var onTextBoxMouseDown = function (event) {\n    // console.log(\"onTextBoxMouseDown\");\n    event.stopPropagation();\n  };\n\n  var onTextBoxKeyPress = function (event) {\n    // console.log(event, event.keyCode);\n    if (event.keyCode === 27) {\n      // esc\n      layout.setEditingTab(undefined);\n    } else if (event.keyCode === 13) {\n      // enter\n      layout.setEditingTab(undefined);\n      layout.doAction(Actions_1.Actions.renameTab(node.getId(), event.target.value));\n    }\n  };\n\n  var cm = layout.getClassName;\n  var parentNode = node.getParent();\n  var baseClassName = Types_1.CLASSES.FLEXLAYOUT__TAB_BUTTON;\n  var classNames = cm(baseClassName);\n  classNames += \" \" + cm(baseClassName + \"_\" + parentNode.getTabLocation());\n\n  if (selected) {\n    classNames += \" \" + cm(baseClassName + \"--selected\");\n  } else {\n    classNames += \" \" + cm(baseClassName + \"--unselected\");\n  }\n\n  if (node.getClassName() !== undefined) {\n    classNames += \" \" + node.getClassName();\n  }\n\n  var renderState = (0, Utils_1.getRenderStateEx)(layout, node, iconFactory, titleFactory);\n  var content = renderState.content ? React.createElement(\"div\", {\n    className: cm(Types_1.CLASSES.FLEXLAYOUT__TAB_BUTTON_CONTENT)\n  }, renderState.content) : null;\n  var leading = renderState.leading ? React.createElement(\"div\", {\n    className: cm(Types_1.CLASSES.FLEXLAYOUT__TAB_BUTTON_LEADING)\n  }, renderState.leading) : null;\n\n  if (layout.getEditingTab() === node) {\n    content = React.createElement(\"input\", {\n      ref: contentRef,\n      className: cm(Types_1.CLASSES.FLEXLAYOUT__TAB_BUTTON_TEXTBOX),\n      \"data-layout-path\": path + \"/textbox\",\n      type: \"text\",\n      autoFocus: true,\n      defaultValue: node.getName(),\n      onKeyDown: onTextBoxKeyPress,\n      onMouseDown: onTextBoxMouseDown,\n      onTouchStart: onTextBoxMouseDown\n    });\n  }\n\n  if (node.isEnableClose()) {\n    var closeTitle = layout.i18nName(I18nLabel_1.I18nLabel.Close_Tab);\n    renderState.buttons.push(React.createElement(\"div\", {\n      key: \"close\",\n      \"data-layout-path\": path + \"/button/close\",\n      title: closeTitle,\n      className: cm(Types_1.CLASSES.FLEXLAYOUT__TAB_BUTTON_TRAILING),\n      onMouseDown: onCloseMouseDown,\n      onClick: onClose,\n      onTouchStart: onCloseMouseDown\n    }, typeof icons.close === \"function\" ? icons.close(node) : icons.close));\n  }\n\n  return React.createElement(\"div\", {\n    ref: selfRef,\n    \"data-layout-path\": path,\n    className: classNames,\n    onMouseDown: onMouseDown,\n    onClick: onAuxMouseClick,\n    onAuxClick: onAuxMouseClick,\n    onContextMenu: onContextMenu,\n    onTouchStart: onMouseDown,\n    title: node.getHelpText()\n  }, leading, content, renderState.buttons);\n};\n\nexports.TabButton = TabButton;","map":{"version":3,"mappings":"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","names":["TabButton","props","node","selected","iconFactory","titleFactory","icons","path","selfRef","React","useRef","contentRef","onMouseDown","event","layout","getEditingTab","dragStart","undefined","isEnableDrag","onClick","onDoubleClick","onAuxMouseClick","auxMouseClick","onContextMenu","showContextMenu","doAction","Actions_1","selectTab","getId","isEnableRename","onRename","setEditingTab","getCurrentDocument","body","addEventListener","onEndEdit","target","current","removeEventListener","isClosable","closeType","getCloseType","ICloseType_1","Always","Visible","window","matchMedia","matches","onClose","deleteTab","onCloseMouseDown","stopPropagation","useLayoutEffect","updateRect","select","layoutRect","getDomRect","r","getBoundingClientRect","_setTabRect","Rect_1","left","top","width","height","onTextBoxMouseDown","onTextBoxKeyPress","keyCode","renameTab","value","cm","getClassName","parentNode","getParent","baseClassName","Types_1","FLEXLAYOUT__TAB_BUTTON","classNames","getTabLocation","renderState","content","className","FLEXLAYOUT__TAB_BUTTON_CONTENT","leading","FLEXLAYOUT__TAB_BUTTON_LEADING","ref","FLEXLAYOUT__TAB_BUTTON_TEXTBOX","type","autoFocus","defaultValue","getName","onKeyDown","onTouchStart","isEnableClose","closeTitle","i18nName","I18nLabel_1","Close_Tab","buttons","push","key","title","FLEXLAYOUT__TAB_BUTTON_TRAILING","close","onAuxClick","getHelpText","exports"],"sources":["C:\\Users\\mmorrone\\UnityProjects\\my-app\\node_modules\\flexlayout-react\\src\\view\\TabButton.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { I18nLabel } from \"../I18nLabel\";\nimport { Actions } from \"../model/Actions\";\nimport { TabNode } from \"../model/TabNode\";\nimport { TabSetNode } from \"../model/TabSetNode\";\nimport { Rect } from \"../Rect\";\nimport { IIcons, ILayoutCallbacks } from \"./Layout\";\nimport { ICloseType } from \"../model/ICloseType\";\nimport { CLASSES } from \"../Types\";\nimport { getRenderStateEx, isAuxMouseEvent } from \"./Utils\";\n\n/** @internal */\nexport interface ITabButtonProps {\n    layout: ILayoutCallbacks;\n    node: TabNode;\n    selected: boolean;\n    iconFactory?: (node: TabNode) => React.ReactNode | undefined;\n    titleFactory?: (node: TabNode) => React.ReactNode | undefined;\n    icons: IIcons;\n    path: string;\n}\n\n/** @internal */\nexport const TabButton = (props: ITabButtonProps) => {\n    const { layout, node, selected, iconFactory, titleFactory, icons, path } = props;\n    const selfRef = React.useRef<HTMLDivElement | null>(null);\n    const contentRef = React.useRef<HTMLInputElement | null>(null);\n\n    const onMouseDown = (event: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent<HTMLDivElement>) => {\n\n        if (!isAuxMouseEvent(event) && !layout.getEditingTab()) {\n            layout.dragStart(event, undefined, node, node.isEnableDrag(), onClick, onDoubleClick);\n        }\n    };\n\n    const onAuxMouseClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        if (isAuxMouseEvent(event)) {\n            layout.auxMouseClick(node, event);\n        }\n    };\n\n    const onContextMenu = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        layout.showContextMenu(node, event);\n    };\n\n    const onClick = () => {\n        layout.doAction(Actions.selectTab(node.getId()));\n    };\n\n    const onDoubleClick = (event: Event) => {\n        if (node.isEnableRename()) {\n            onRename();\n        }\n    };\n\n    const onRename = () => {\n        layout.setEditingTab(node);\n        layout.getCurrentDocument()!.body.addEventListener(\"mousedown\", onEndEdit);\n        layout.getCurrentDocument()!.body.addEventListener(\"touchstart\", onEndEdit);\n    };\n\n    const onEndEdit = (event: Event) => {\n        if (event.target !== contentRef.current!) {\n            layout.getCurrentDocument()!.body.removeEventListener(\"mousedown\", onEndEdit);\n            layout.getCurrentDocument()!.body.removeEventListener(\"touchstart\", onEndEdit);\n            layout.setEditingTab(undefined);\n        }\n    };\n\n    const isClosable = () => {\n        const closeType = node.getCloseType();\n        if (selected || closeType === ICloseType.Always) {\n            return true;\n        }\n        if (closeType === ICloseType.Visible) {\n            // not selected but x should be visible due to hover\n            if (window.matchMedia && window.matchMedia(\"(hover: hover) and (pointer: fine)\").matches) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    const onClose = (event: React.MouseEvent<HTMLDivElement>) => {\n        if (isClosable()) {\n            layout.doAction(Actions.deleteTab(node.getId()));\n        } else {\n            onClick();\n        }\n    };\n\n    const onCloseMouseDown = (event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>) => {\n        event.stopPropagation();\n    };\n\n    React.useLayoutEffect(() => {\n        updateRect();\n        if (layout.getEditingTab() === node) {\n            (contentRef.current! as HTMLInputElement).select();\n        }\n    });\n\n    const updateRect = () => {\n        // record position of tab in node\n        const layoutRect = layout.getDomRect();\n        const r = selfRef.current!.getBoundingClientRect();\n        node._setTabRect(new Rect(r.left - layoutRect.left, r.top - layoutRect.top, r.width, r.height));\n    };\n\n    const onTextBoxMouseDown = (event: React.MouseEvent<HTMLInputElement> | React.TouchEvent<HTMLInputElement>) => {\n        // console.log(\"onTextBoxMouseDown\");\n        event.stopPropagation();\n    };\n\n    const onTextBoxKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // console.log(event, event.keyCode);\n        if (event.keyCode === 27) {\n            // esc\n            layout.setEditingTab(undefined);\n        } else if (event.keyCode === 13) {\n            // enter\n            layout.setEditingTab(undefined);\n            layout.doAction(Actions.renameTab(node.getId(), (event.target as HTMLInputElement).value));\n        }\n    };\n\n    const cm = layout.getClassName;\n    const parentNode = node.getParent() as TabSetNode;\n\n    let baseClassName = CLASSES.FLEXLAYOUT__TAB_BUTTON;\n    let classNames = cm(baseClassName);\n    classNames += \" \" + cm(baseClassName + \"_\" + parentNode.getTabLocation());\n\n    if (selected) {\n        classNames += \" \" + cm(baseClassName + \"--selected\");\n    } else {\n        classNames += \" \" + cm(baseClassName + \"--unselected\");\n    }\n\n    if (node.getClassName() !== undefined) {\n        classNames += \" \" + node.getClassName();\n    }\n\n    const renderState = getRenderStateEx(layout, node, iconFactory, titleFactory);\n\n    let content = renderState.content ? (\n        <div className={cm(CLASSES.FLEXLAYOUT__TAB_BUTTON_CONTENT)}>\n            {renderState.content}\n        </div>) : null;\n\n    const leading = renderState.leading ? (\n        <div className={cm(CLASSES.FLEXLAYOUT__TAB_BUTTON_LEADING)}>\n            {renderState.leading}\n        </div>) : null;\n\n    if (layout.getEditingTab() === node) {\n        content = (\n            <input\n                ref={contentRef}\n                className={cm(CLASSES.FLEXLAYOUT__TAB_BUTTON_TEXTBOX)}\n                data-layout-path={path + \"/textbox\"}\n                type=\"text\"\n                autoFocus={true}\n                defaultValue={node.getName()}\n                onKeyDown={onTextBoxKeyPress}\n                onMouseDown={onTextBoxMouseDown}\n                onTouchStart={onTextBoxMouseDown}\n            />\n        );\n    }\n\n    if (node.isEnableClose()) {\n        const closeTitle = layout.i18nName(I18nLabel.Close_Tab);\n        renderState.buttons.push(\n            <div\n                key=\"close\"\n                data-layout-path={path + \"/button/close\"}\n                title={closeTitle}\n                className={cm(CLASSES.FLEXLAYOUT__TAB_BUTTON_TRAILING)}\n                onMouseDown={onCloseMouseDown}\n                onClick={onClose}\n                onTouchStart={onCloseMouseDown}>\n                {(typeof icons.close === \"function\") ? icons.close(node) : icons.close}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            ref={selfRef}\n            data-layout-path={path}\n            className={classNames}\n            onMouseDown={onMouseDown}\n            onClick={onAuxMouseClick}\n            onAuxClick={onAuxMouseClick}\n            onContextMenu={onContextMenu}\n            onTouchStart={onMouseDown}\n            title={node.getHelpText()}\n        >\n            {leading}\n            {content}\n            {renderState.buttons}\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"script"}